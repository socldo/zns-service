// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.5.1
// source: zns.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "vn.techres.microservice.grpc.nestjs_zns";

export interface SendZnsToListCustomerRequest {
  phones: string[];
  templateId: string;
  accessToken: string;
}

export interface SendZnsToSingleCustomerRequest {
  phone: string;
  templateId: string;
  accessToken: string;
}

export interface BaseSendZnsToListCustomerResponse {
  status: number;
  message: string;
  data: EmptyResponse | undefined;
}

export interface EmptyResponse {
}

export interface SendZnsToListCustomerResponse {
  message: string;
}

export const VN_TECHRES_MICROSERVICE_GRPC_NESTJS_ZNS_PACKAGE_NAME = "vn.techres.microservice.grpc.nestjs_zns";

export interface ZNSServiceClient {
  sendZnsToListCustomer(
    request: SendZnsToListCustomerRequest,
    metadata?: Metadata,
  ): Observable<BaseSendZnsToListCustomerResponse>;

  sendZnsToSingleCustomer(
    request: SendZnsToSingleCustomerRequest,
    metadata?: Metadata,
  ): Observable<BaseSendZnsToListCustomerResponse>;
}

export interface ZNSServiceController {
  sendZnsToListCustomer(
    request: SendZnsToListCustomerRequest,
    metadata?: Metadata,
  ):
    | Promise<BaseSendZnsToListCustomerResponse>
    | Observable<BaseSendZnsToListCustomerResponse>
    | BaseSendZnsToListCustomerResponse;

  sendZnsToSingleCustomer(
    request: SendZnsToSingleCustomerRequest,
    metadata?: Metadata,
  ):
    | Promise<BaseSendZnsToListCustomerResponse>
    | Observable<BaseSendZnsToListCustomerResponse>
    | BaseSendZnsToListCustomerResponse;
}

export function ZNSServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendZnsToListCustomer", "sendZnsToSingleCustomer"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ZNSService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ZNSService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const Z_NS_SERVICE_NAME = "ZNSService";
